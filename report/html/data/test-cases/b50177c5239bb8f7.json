{
  "uid" : "b50177c5239bb8f7",
  "name" : "tc_车次详情.test_500_首页车次号搜索绑定行程",
  "fullName" : "testCase.test_50_车次详情.tc_车次详情.test_500_首页车次号搜索绑定行程",
  "historyId" : "7257b0813456d155e7e7c5db059e40f1",
  "time" : {
    "start" : 1571905163398,
    "stop" : 1571905442588,
    "duration" : 279190
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "passed",
  "statusMessage" : "ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))",
  "statusTrace" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "passed",
    "statusMessage" : "ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))",
    "statusTrace" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
    "steps" : [ {
      "name" : "点击首页",
      "time" : {
        "start" : 1571905165405,
        "stop" : 1571905170410,
        "duration" : 5005
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "获取toast提示",
      "time" : {
        "start" : 1571905170410,
        "stop" : 1571905171613,
        "duration" : 1203
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "向下滑动",
      "time" : {
        "start" : 1571905171613,
        "stop" : 1571905181709,
        "duration" : 10096
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "点击首页_车次查询",
      "time" : {
        "start" : 1571905181709,
        "stop" : 1571905186602,
        "duration" : 4893
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "点击首页_车次号搜索_时刻查询",
      "time" : {
        "start" : 1571905192334,
        "stop" : 1571905223418,
        "duration" : 31084
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ {
        "name" : "点击_车次号输入",
        "time" : {
          "start" : 1571905192334,
          "stop" : 1571905199134,
          "duration" : 6800
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "键盘输入",
        "time" : {
          "start" : 1571905199134,
          "stop" : 1571905219000,
          "duration" : 19866
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击首页_时刻查询_查询",
        "time" : {
          "start" : 1571905219000,
          "stop" : 1571905223418,
          "duration" : 4418
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "选择始终站",
      "time" : {
        "start" : 1571905237306,
        "stop" : 1571905238435,
        "duration" : 1129
      },
      "status" : "failed",
      "steps" : [ {
        "name" : "根据车次号获取车次详情api信息",
        "time" : {
          "start" : 1571905237306,
          "stop" : 1571905238435,
          "duration" : 1129
        },
        "status" : "failed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "返回到首页",
      "time" : {
        "start" : 1571905239217,
        "stop" : 1571905270319,
        "duration" : 31102
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ {
        "name" : "获取返回按钮元素",
        "time" : {
          "start" : 1571905239217,
          "stop" : 1571905239307,
          "duration" : 90
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击返回按钮",
        "time" : {
          "start" : 1571905239307,
          "stop" : 1571905244241,
          "duration" : 4934
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "获取返回按钮元素",
        "time" : {
          "start" : 1571905244241,
          "stop" : 1571905264634,
          "duration" : 20393
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击首页",
        "time" : {
          "start" : 1571905264634,
          "stop" : 1571905270319,
          "duration" : 5685
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 4,
      "hasContent" : true
    }, {
      "name" : "点击首页",
      "time" : {
        "start" : 1571905270562,
        "stop" : 1571905275551,
        "duration" : 4989
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "获取toast提示",
      "time" : {
        "start" : 1571905275551,
        "stop" : 1571905275797,
        "duration" : 246
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "向下滑动",
      "time" : {
        "start" : 1571905275797,
        "stop" : 1571905286277,
        "duration" : 10480
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "点击首页_车次查询",
      "time" : {
        "start" : 1571905286277,
        "stop" : 1571905290651,
        "duration" : 4374
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "点击首页_车次号搜索_时刻查询",
      "time" : {
        "start" : 1571905296180,
        "stop" : 1571905326834,
        "duration" : 30654
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ {
        "name" : "点击_车次号输入",
        "time" : {
          "start" : 1571905296180,
          "stop" : 1571905300996,
          "duration" : 4816
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "键盘输入",
        "time" : {
          "start" : 1571905300996,
          "stop" : 1571905321837,
          "duration" : 20841
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击首页_时刻查询_查询",
        "time" : {
          "start" : 1571905321837,
          "stop" : 1571905326834,
          "duration" : 4997
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "选择始终站",
      "time" : {
        "start" : 1571905351160,
        "stop" : 1571905399491,
        "duration" : 48331
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ {
        "name" : "根据车次号获取车次详情api信息",
        "time" : {
          "start" : 1571905351160,
          "stop" : 1571905351452,
          "duration" : 292
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "根据车次号获取车次详情api信息",
        "time" : {
          "start" : 1571905351453,
          "stop" : 1571905351620,
          "duration" : 167
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "根据车次号获取车次详情api信息",
        "time" : {
          "start" : 1571905351621,
          "stop" : 1571905351800,
          "duration" : 179
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "向上滑动",
        "time" : {
          "start" : 1571905357177,
          "stop" : 1571905368005,
          "duration" : 10828
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击_选择车次出发和到达_跨天第一个",
        "time" : {
          "start" : 1571905375777,
          "stop" : 1571905399491,
          "duration" : 23714
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 5,
      "hasContent" : true
    }, {
      "name" : "点击_途经站点_确认添加",
      "time" : {
        "start" : 1571905399491,
        "stop" : 1571905405305,
        "duration" : 5814
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "获取toast提示",
      "time" : {
        "start" : 1571905405305,
        "stop" : 1571905409992,
        "duration" : 4687
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "返回到首页",
      "time" : {
        "start" : 1571905410608,
        "stop" : 1571905442588,
        "duration" : 31980
      },
      "status" : "passed",
      "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
      "steps" : [ {
        "name" : "获取返回按钮元素",
        "time" : {
          "start" : 1571905410608,
          "stop" : 1571905411076,
          "duration" : 468
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击返回按钮",
        "time" : {
          "start" : 1571905411076,
          "stop" : 1571905417112,
          "duration" : 6036
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "获取返回按钮元素",
        "time" : {
          "start" : 1571905417112,
          "stop" : 1571905437304,
          "duration" : 20192
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "点击首页",
        "time" : {
          "start" : 1571905437304,
          "stop" : 1571905442588,
          "duration" : 5284
        },
        "status" : "passed",
        "statusMessage" : "self = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n>               (self.host, self.port), self.timeout, **extra_kw)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('www.cx9z.com', 443), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, socket_options=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith('['):\n            host = host.strip('[]')\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>, chunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*'...tion': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C5B8F98>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n            Perform a request on a given urllib connection object taken from our\n            pool.\n    \n            :param conn:\n                a connection from one of our connection pools\n    \n            :param timeout:\n                Socket timeout in seconds for the request. This can be a\n                float or integer, which will set the same timeout value for\n                the socket connect and the socket read, or an instance of\n                :class:`urllib3.util.Timeout`, which gives you more fine-grained\n                control over your timeouts.\n            \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n            Called right before a request is made, after the socket is created.\n            \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def connect(self):\n        # Add certificate verification\n>       conn = self._new_conn()\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>\n\n    def _new_conn(self):\n        \"\"\" Establish a socket connection and set nodelay settings on it.\n    \n            :return: New socket connection.\n            \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw['source_address'] = self.source_address\n    \n        if self.socket_options:\n            extra_kw['socket_options'] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self.host, self.port), self.timeout, **extra_kw)\n    \n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                (self.host, self.timeout))\n    \n        except SocketError as e:\n            raise NewConnectionError(\n>               self, \"Failed to establish a new connection: %s\" % e)\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connection.py:150: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>, method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', body = None\nheaders = {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'content-type': 'application/x-www-form-urlencoded', 'token': 'c9e2527e3962444698575a83a1a638e6'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002301C6EB7F0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n            Get a connection from the pool and perform an HTTP request. This is the\n            lowest level call for making a request, so you'll need to specify all\n            the raw details.\n    \n            .. note::\n    \n               More commonly, it's appropriate to use a convenience method provided\n               by :class:`.RequestMethods`, such as :meth:`request`.\n    \n            .. note::\n    \n               `release_conn` will only behave as expected if\n               `preload_content=False` because we want to make\n               `preload_content=False` the default behaviour someday soon without\n               breaking backwards compatibility.\n    \n            :param method:\n                HTTP request method (such as GET, POST, PUT, etc.)\n    \n            :param body:\n                Data to send in the request body (useful for creating\n                POST requests, see HTTPConnectionPool.post_url for\n                more convenience).\n    \n            :param headers:\n                Dictionary of custom headers to send, such as User-Agent,\n                If-None-Match, etc. If None, pool headers are used. If provided,\n                these headers completely replace any pool-specific headers.\n    \n            :param retries:\n                Configure the number of retries to allow before raising a\n                :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n                Pass ``None`` to retry until you receive a response. Pass a\n                :class:`~urllib3.util.retry.Retry` object for fine-grained control\n                over different types of retries.\n                Pass an integer number to retry connection errors that many times,\n                but no other types of errors. Pass zero to never retry.\n    \n                If ``False``, then retries are disabled and any exception is raised\n                immediately. Also, instead of raising a MaxRetryError on redirects,\n                the redirect response will be returned.\n    \n            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n            :param redirect:\n                If True, automatically handle redirects (status codes 301, 302,\n                303, 307, 308). Each redirect counts as a retry. Disabling retries\n                will disable redirect, too.\n    \n            :param assert_same_host:\n                If ``True``, will make sure that the host of the pool requests is\n                consistent else will raise HostChangedError. When False, you can\n                use the pool on an HTTP proxy and request foreign hosts.\n    \n            :param timeout:\n                If specified, overrides the default timeout for this one\n                request. It may be a float (in seconds) or an instance of\n                :class:`urllib3.util.Timeout`.\n    \n            :param pool_timeout:\n                If set and the pool is set to block=True, then this method will\n                block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n                connection is available within the time period.\n    \n            :param release_conn:\n                If False, then the urlopen call will not release the connection\n                back into the pool once a response is received (but will release if\n                you read the entire contents of the response such as when\n                `preload_content=True`). This is useful if you're not preloading\n                the response's content immediately. You will need to call\n                ``r.release_conn()`` on the response ``r`` to return the connection\n                back into the pool. If None, it takes the value of\n                ``response_kw.get('preload_content', True)``.\n    \n            :param chunked:\n                If True, urllib3 will send the body using chunked transfer\n                encoding. Otherwise, urllib3 will send the body using the standard\n                content-length form. Defaults to False.\n    \n            :param int body_pos:\n                Position to seek to in file-like body in the event of a retry or\n                redirect. Typically this won't need to be set because urllib3 will\n                auto-populate the value when needed.\n    \n            :param \\\\**response_kw:\n                Additional parameters are passed to\n                :meth:`urllib3.response.HTTPResponse.from_httplib`\n            \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nf:\\python_1\\lib\\site-packages\\urllib3\\connectionpool.py:639: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET'\nurl = '/vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836', response = None\nerror = NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002301995A908>\n_stacktrace = <traceback object at 0x000002301C582D88>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n            :param response: A response object, or None, if the server did not\n                return a response.\n            :type response: :class:`~urllib3.response.HTTPResponse`\n            :param Exception error: An error encountered during the request, or\n                None if the response was received successfully.\n    \n            :return: A new ``Retry`` object.\n            \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\urllib3\\util\\retry.py:388: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCase.test_50_车次详情.tc_车次详情 testMethod=test_500_首页车次号搜索绑定行程>\n\n    def test_500_首页车次号搜索绑定行程(self):\n        dr = page_车次详情(self.driver)\n        dr.act_下滑(3)\n        dr.click_首页_车次查询()\n        dr.act_滑动_AtoB(dr.btn_首页_车次查询, dr.btn_车站大屏, \"车次查询\", \"车站大屏\")\n        sid= dr.bus_首页_车次号搜索(\"G836\")\n        dr.click_后一天()\n>       dr.bus_选择始终站(sid)\n\ntestCase\\test_50_车次详情.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:57: in bus_选择始终站\n    起点站 = self.get_api_车次详情根据车次号(车次号)['arr_station'][0]\nf:\\python_1\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\nbusinessView\\page_选择车次出发和到达.py:47: in get_api_车次详情根据车次号\n    r = get_requests(path, form_datas=form_datas)\ncommon\\request.py:36: in get_requests\n    r = requests.get(base_url, headers=header, params=form_datas)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:72: in get\n    return request('get', url, params=params, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\api.py:58: in request\n    return session.request(method=method, url=url, **kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:508: in request\n    resp = self.send(prep, **send_kwargs)\nf:\\python_1\\lib\\site-packages\\requests\\sessions.py:618: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.adapters.HTTPAdapter object at 0x000002301C6EB0B8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002301C6EB6A0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) How long to wait for the server to send\n                data before giving up, as a float, or a :ref:`(connect timeout,\n                read timeout) <timeouts>` tuple.\n            :type timeout: float or tuple or urllib3 Timeout object\n            :param verify: (optional) Either a boolean, in which case it controls whether\n                we verify the server's TLS certificate, or a string, in which case it\n                must be a path to a CA bundle to use\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            :rtype: requests.Response\n            \"\"\"\n    \n        conn = self.get_connection(request.url, proxies)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7+ versions, use buffering of HTTP\n                        # responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 2.6 versions and back\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n>           raise ConnectionError(e, request=request)\nE           requests.exceptions.ConnectionError: HTTPSConnectionPool(host='www.cx9z.com', port=443): Max retries exceeded with url: /vega-station/schedule/detailByTrainNo?date=2019-10-25&trainNO=G836 (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000002301C5B8E48>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。',))\n\nf:\\python_1\\lib\\site-packages\\requests\\adapters.py:508: ConnectionError",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 0,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 4,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "24669d294ad0059c",
      "name" : "截图",
      "source" : "24669d294ad0059c.png",
      "type" : "image/png",
      "size" : 119517
    }, {
      "uid" : "9d813e7ca7d851bf",
      "name" : "Captured log setup",
      "source" : "9d813e7ca7d851bf.txt",
      "type" : "text/plain",
      "size" : 115
    }, {
      "uid" : "26e9ee81c15a5e8d",
      "name" : "Captured log call",
      "source" : "26e9ee81c15a5e8d.txt",
      "type" : "text/plain",
      "size" : 1201
    }, {
      "uid" : "4b4335b1b56bbf61",
      "name" : "截图",
      "source" : "4b4335b1b56bbf61.png",
      "type" : "image/png",
      "size" : 190121
    }, {
      "uid" : "3d0a5f852b9f76d2",
      "name" : "Captured log setup",
      "source" : "3d0a5f852b9f76d2.txt",
      "type" : "text/plain",
      "size" : 115
    }, {
      "uid" : "6659dff6ed090752",
      "name" : "Captured log call",
      "source" : "6659dff6ed090752.txt",
      "type" : "text/plain",
      "size" : 2196
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 6,
    "stepsCount" : 36,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "WIN-NPMSMCDMRF4"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "13852-MainThread"
  }, {
    "name" : "suite",
    "value" : "testCase.test_50_车次详情"
  }, {
    "name" : "testClass",
    "value" : "testCase.test_50_车次详情"
  }, {
    "name" : "testMethod",
    "value" : "tc_车次详情.test_500_首页车次号搜索绑定行程"
  }, {
    "name" : "package",
    "value" : "testCase.test_50_车次详情"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "b50177c5239bb8f7.json",
  "parameterValues" : [ ]
}